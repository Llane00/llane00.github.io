<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>js基础 on Llane00&#39;s Blog</title>
    <link>http://llane00.github.io/tags/js%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in js基础 on Llane00&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>bluetinestyle@126.com (Llane00)</managingEditor>
    <webMaster>bluetinestyle@126.com (Llane00)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 15 Nov 2021 15:49:28 +0800</lastBuildDate>
    
        <atom:link href="http://llane00.github.io/tags/js%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>Js实现数组拍平</title>
        <link>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/</link>
        <pubDate>Mon, 15 Nov 2021 15:49:28 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 15 Nov 2021 15:49:28 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E6%8B%8D%E5%B9%B3/</guid>
        <description>API: 数组+初始 pid（一般为 0） 实现思路：用递归或者轮询数组一步步创建一个新的数组对象 要求拍平的原数据如下： 1 2 3 4 5 6 7 let arr = [ { id: 1, name: &amp;#</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>Js实现深拷贝</title>
        <link>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/</link>
        <pubDate>Fri, 12 Nov 2021 17:15:59 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 12 Nov 2021 17:15:59 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/</guid>
        <description>深拷贝使用场景： 默认选项 部分修改 API: 接收一个对象或者基本类型，对象的类型包括 Array、function、普通 Object、RegExp 正则表</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-16-浮点数精度</title>
        <link>http://llane00.github.io/restart-js/16-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6/</link>
        <pubDate>Thu, 04 Nov 2021 10:21:52 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 04 Nov 2021 10:21:52 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/16-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 关于浮点数精度导致 js 的计算错误问题，我之前在Js 大数相加有提到过，那这篇文章</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-15-继承</title>
        <link>http://llane00.github.io/restart-js/15-%E7%BB%A7%E6%89%BF/</link>
        <pubDate>Wed, 03 Nov 2021 09:54:18 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 03 Nov 2021 09:54:18 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/15-%E7%BB%A7%E6%89%BF/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本文讲解javascript的各种继承和优缺点 1.原型链继承 1 2 3 4 5 6 7 8</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-14-创建对象</title>
        <link>http://llane00.github.io/restart-js/14-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Sat, 30 Oct 2021 17:13:53 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 30 Oct 2021 17:13:53 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/14-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本文会介绍不同创建对象的方法，来探究不同解决方案的优缺点 1.工厂模式 创建一个</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-13-类数组对象与arguments</title>
        <link>http://llane00.github.io/restart-js/13-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/</link>
        <pubDate>Fri, 29 Oct 2021 09:50:38 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 09:50:38 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/13-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 类数组 在之前模拟实现apply和bind时我们其实已经遇见过argument</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-12-模拟实现new</title>
        <link>http://llane00.github.io/restart-js/12-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/</link>
        <pubDate>Thu, 28 Oct 2021 10:19:05 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 28 Oct 2021 10:19:05 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/12-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 new Fn() 一共做了 4 件事： 生成一个临时空对象 var temp = {} 临时对象的原型为构造函数 Fn 的原</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-11-模拟实现bind</title>
        <link>http://llane00.github.io/restart-js/11-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0bind/</link>
        <pubDate>Thu, 28 Oct 2021 09:34:41 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 28 Oct 2021 09:34:41 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/11-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0bind/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 MDN 对 bing 的定义 bind()方法会创建一个新函数。当这个函数被调用时，bind(</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-10-模拟实现call和apply</title>
        <link>http://llane00.github.io/restart-js/10-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E5%92%8Capply/</link>
        <pubDate>Wed, 27 Oct 2021 18:55:39 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 27 Oct 2021 18:55:39 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/10-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E5%92%8Capply/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 call使用的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var foo = { value: 1 }; function bar(name, age) { console.log(name) console.log(age) console.log(this.value);</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-9-函数的参数传递</title>
        <link>http://llane00.github.io/restart-js/9-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</link>
        <pubDate>Wed, 27 Oct 2021 09:54:45 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 27 Oct 2021 09:54:45 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/9-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数： ECM</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-8-闭包</title>
        <link>http://llane00.github.io/restart-js/8-%E9%97%AD%E5%8C%85/</link>
        <pubDate>Tue, 26 Oct 2021 09:38:26 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 26 Oct 2021 09:38:26 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/8-%E9%97%AD%E5%8C%85/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 在MDN广泛定义中闭包指的是能访问自由变量的函数（自由变量指的是即不是这个函</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-7-执行上下文汇总篇</title>
        <link>http://llane00.github.io/restart-js/7-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B1%87%E6%80%BB%E7%AF%87/</link>
        <pubDate>Mon, 25 Oct 2021 13:30:08 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 25 Oct 2021 13:30:08 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/7-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B1%87%E6%80%BB%E7%AF%87/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本篇是3、4、5、6篇的汇总，会用两个例子来详细说明执行上下文的运行流程 例子</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-6-This</title>
        <link>http://llane00.github.io/restart-js/6-this/</link>
        <pubDate>Sat, 23 Oct 2021 10:45:29 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 23 Oct 2021 10:45:29 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/6-this/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 this一直都是学习js的时候很头疼的东西， 继续接着上篇说，当javascr</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-5-作用域链</title>
        <link>http://llane00.github.io/restart-js/5-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
        <pubDate>Sat, 16 Oct 2021 15:04:05 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 16 Oct 2021 15:04:05 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/5-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 上篇说到，当javascript代码执行一段可执行代码(executable</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-4-变量对象</title>
        <link>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Fri, 15 Oct 2021 13:25:39 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 15 Oct 2021 13:25:39 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 上篇说到，当javascript代码执行一段可执行代码(executable</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-3-执行上下文栈</title>
        <link>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</link>
        <pubDate>Thu, 14 Oct 2021 11:33:01 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 14 Oct 2021 11:33:01 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 我们知道在js中有变量提升， 所以js引擎在解析代码的时候不是一行一行去执行的</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-2-作用域</title>
        <link>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
        <pubDate>Tue, 12 Oct 2021 11:19:18 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 12 Oct 2021 11:19:18 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 作用域是程序如何储存和获取变量的约定 javascript采用了词法作用域（即</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-1-原型与原型链</title>
        <link>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Mon, 11 Oct 2021 10:56:04 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 11 Oct 2021 10:56:04 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 1 2 function Person() {} let Neo = new Person() Person 是一个构造函数 Neo是构造函数Person创建的一个实</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>Js实现节流和防抖</title>
        <link>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</link>
        <pubDate>Mon, 19 Jul 2021 14:30:09 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 14:30:09 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</guid>
        <description>大招技能有冷却 == 节流（throttle） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * 节流原理：在一定时间内，只能触发</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>Js原型</title>
        <link>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</link>
        <pubDate>Mon, 19 Jul 2021 09:06:52 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 09:06:52 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</guid>
        <description>关于Js原型 1 2 3 4 5 6 7 8 9 10 11 // 例子 function Person() { } var person = new Person(); console.log(person.__proto__ == Person.prototype) // true console.log(Person.prototype.constructor == Person) // true // 顺便学习一个ES5的方法,可以获得对象的原型 console.log(Object.getPrototypeOf(person) === Person.prototype) // true 实例与</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Js实现大数相加</title>
        <link>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
        <pubDate>Sun, 11 Jul 2021 20:09:12 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sun, 11 Jul 2021 20:09:12 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
        <description>背景： 在 JavaScript 里面，数字均为双精度浮点类型，即一个介于 ±2−1023和 ±2+1024之间的数字，或约为 ±10−308到 ±10+308，数字精度为</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
