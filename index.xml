<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Llane00&#39;s Blog</title>
    <link>http://llane00.github.io/</link>
    <description>Recent content on Llane00&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>bluetinestyle@126.com (Llane00)</managingEditor>
    <webMaster>bluetinestyle@126.com (Llane00)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 09 Nov 2021 10:35:07 +0800</lastBuildDate>
    
        <atom:link href="http://llane00.github.io/index.xml" rel="self" type="application/rss+xml" />
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>读书笔记《图解HTTP》</title>
        <link>http://llane00.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%9B%BE%E8%A7%A3http/</link>
        <pubDate>Tue, 09 Nov 2021 10:35:07 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 09 Nov 2021 10:35:07 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E5%9B%BE%E8%A7%A3http/</guid>
        <description>目前主流的 Http 版本是 1.1，于 1997 年 1 月发布 通常使用的网络是在 Tcp/IP 协议的基础上运行的 HTTP 协议是在 TCP/IP 协议的子集 TCP/IP 协议族按层次分类可以分为： 应用层：应用</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>菜鸟学算法-9-基数排序</title>
        <link>http://llane00.github.io/algorithm/9-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Mon, 08 Nov 2021 09:42:10 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 08 Nov 2021 09:42:10 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/9-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 基数排序 基数排序就是按照数字的”位”来排序。 “位“是进位的位，比如十进制的基数是 10，就可以按照个十百千</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-8-桶排序</title>
        <link>http://llane00.github.io/algorithm/8-%E6%A1%B6%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Sun, 07 Nov 2021 14:04:58 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sun, 07 Nov 2021 14:04:58 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/8-%E6%A1%B6%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 桶排序： 先分类，把数据放进相应的桶里，然后对每个桶进行局部排序，最后再把桶排序一下 有四步: 1.创建桶 2.</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-7-计数排序</title>
        <link>http://llane00.github.io/algorithm/7-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Fri, 05 Nov 2021 11:14:09 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 05 Nov 2021 11:14:09 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/7-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 计数：数一数每个元素重复出现的次数 统计完后，从小到大按照统计的重复次数一个个填充到一个新数组 从查和排两个</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-6-快速排序完整版</title>
        <link>http://llane00.github.io/algorithm/6-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%AE%8C%E6%95%B4%E7%89%88/</link>
        <pubDate>Thu, 04 Nov 2021 13:33:57 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 04 Nov 2021 13:33:57 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/6-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%AE%8C%E6%95%B4%E7%89%88/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 在菜鸟算法第一篇中我们学习了简易版的快速排序，本篇介绍的是完整版的快速排序，马上你就知道简易版的有多屑！</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-16-浮点数精度</title>
        <link>http://llane00.github.io/restart-js/16-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6/</link>
        <pubDate>Thu, 04 Nov 2021 10:21:52 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 04 Nov 2021 10:21:52 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/16-%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 关于浮点数精度导致js的计算错误问题，我之前在Js大数相加有提到过，那这篇文</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-5-归并排序</title>
        <link>http://llane00.github.io/algorithm/5-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Wed, 03 Nov 2021 15:41:41 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 03 Nov 2021 15:41:41 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/5-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 《归并》指的是递归+合并，是典型的分而治之算法 把一个数组一分为二，递归地排序好没一部分，最后合并 并 这个算</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-15-继承</title>
        <link>http://llane00.github.io/restart-js/15-%E7%BB%A7%E6%89%BF/</link>
        <pubDate>Wed, 03 Nov 2021 09:54:18 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 03 Nov 2021 09:54:18 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/15-%E7%BB%A7%E6%89%BF/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本文讲解javascript的各种继承和优缺点 1.原型链继承 1 2 3 4 5 6 7 8</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-4-插入排序</title>
        <link>http://llane00.github.io/algorithm/4-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Tue, 02 Nov 2021 11:12:13 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 02 Nov 2021 11:12:13 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/4-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 从有序序列的尾部开始，逐个与目标元素比较，如果大于该元素，该元素需要后移 核心是如何在有序序列里找到正确的</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-14-创建对象</title>
        <link>http://llane00.github.io/restart-js/14-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Sat, 30 Oct 2021 17:13:53 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 30 Oct 2021 17:13:53 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/14-%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本文会介绍不同创建对象的方法，来探究不同解决方案的优缺点 1.工厂模式 创建一个</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>3-React-哲学</title>
        <link>http://llane00.github.io/reactjs/3-react-%E5%93%B2%E5%AD%A6/</link>
        <pubDate>Fri, 29 Oct 2021 17:26:43 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 17:26:43 +0800</atom:modified>
        <guid>http://llane00.github.io/reactjs/3-react-%E5%93%B2%E5%AD%A6/</guid>
        <description>我们可以在React官网-React哲学这里找到React对自己的定义： 我们认为，React 是用 JavaScript 构建快速响应的大型 Web 应用程序的首选方式。 关</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
      </item>
      
      <item>
        <title>学习React_hooks_2</title>
        <link>http://llane00.github.io/reactjs/2-react-hooks/</link>
        <pubDate>Fri, 29 Oct 2021 15:22:40 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 15:22:40 +0800</atom:modified>
        <guid>http://llane00.github.io/reactjs/2-react-hooks/</guid>
        <description>从函数的角度来理解hooks的概念 React理念：UI = f(data) 视图UI会根据自变量变化 自变量： useState 定义自变量 useReducer(复杂版的useS</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-3-选择排序</title>
        <link>http://llane00.github.io/algorithm/3-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Fri, 29 Oct 2021 11:43:27 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 11:43:27 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/3-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 选择排序，是每次遍历都选最小的一个数交换到已经排好的序列的后面 5 4 3 2 1 第一次遍历发现最小的是1 把5和1</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>Vim使用笔记2</title>
        <link>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B02/</link>
        <pubDate>Fri, 29 Oct 2021 11:03:27 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 11:03:27 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B02/</guid>
        <description>由于我目前还是用vscode居多，vscode的插件和环境配置对前端开发更加友好，我打算还是在vscode上开发，辅助用vscode+vim</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
          
        
        
          
            
              <category>菜鸟学vim</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-13-类数组对象与arguments</title>
        <link>http://llane00.github.io/restart-js/13-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/</link>
        <pubDate>Fri, 29 Oct 2021 09:50:38 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 29 Oct 2021 09:50:38 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/13-%E7%B1%BB%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E4%B8%8Earguments/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 类数组 在之前模拟实现apply和bind时我们其实已经遇见过argument</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-2-冒泡排序</title>
        <link>http://llane00.github.io/algorithm/2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Thu, 28 Oct 2021 13:15:12 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 28 Oct 2021 13:15:12 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 冒泡排序我想是大部分人接触的第一个排序算法，原理也很形象， 每一次轮询都会将最大（小）的数字通过一个个相邻</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-12-模拟实现new</title>
        <link>http://llane00.github.io/restart-js/12-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/</link>
        <pubDate>Thu, 28 Oct 2021 10:19:05 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 28 Oct 2021 10:19:05 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/12-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0new/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 我们先分析一下new做了什么， 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 function Person(name, age) {</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-11-模拟实现bind</title>
        <link>http://llane00.github.io/restart-js/11-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0bind/</link>
        <pubDate>Thu, 28 Oct 2021 09:34:41 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 28 Oct 2021 09:34:41 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/11-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0bind/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 MDN对bing的定义 bind()方法会创建一个新函数。当这个函数被调用时，</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-10-模拟实现call和apply</title>
        <link>http://llane00.github.io/restart-js/10-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E5%92%8Capply/</link>
        <pubDate>Wed, 27 Oct 2021 18:55:39 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 27 Oct 2021 18:55:39 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/10-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E5%92%8Capply/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 call使用的例子： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 var foo = { value: 1 }; function bar(name, age) { console.log(name) console.log(age) console.log(this.value);</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>菜鸟学算法-1-简单版快速排序</title>
        <link>http://llane00.github.io/algorithm/1-%E7%AE%80%E5%8D%95%E7%89%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Wed, 27 Oct 2021 11:15:15 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 27 Oct 2021 11:15:15 +0800</atom:modified>
        <guid>http://llane00.github.io/algorithm/1-%E7%AE%80%E5%8D%95%E7%89%88%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
        <description>我想知道这是为什么 &amp;ndash;费曼 快速排序从形式上为归分算法 1.分 核心是把数组按分界点一分为三 1 2 3 let pivot = array[array.length-1] let left = array.filter((item, index) =&amp;gt; item &amp;lt;= pivot &amp;amp;&amp;amp; index != array.length-1) let right</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>算法基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>菜鸟算法</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-9-函数的参数传递</title>
        <link>http://llane00.github.io/restart-js/9-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</link>
        <pubDate>Wed, 27 Oct 2021 09:54:45 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Wed, 27 Oct 2021 09:54:45 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/9-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 在《JavaScript高级程序设计》第三版 4.1.3，讲到传递参数： ECM</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-8-闭包</title>
        <link>http://llane00.github.io/restart-js/8-%E9%97%AD%E5%8C%85/</link>
        <pubDate>Tue, 26 Oct 2021 09:38:26 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 26 Oct 2021 09:38:26 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/8-%E9%97%AD%E5%8C%85/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 在MDN广泛定义中闭包指的是能访问自由变量的函数（自由变量指的是即不是这个函</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-7-执行上下文汇总篇</title>
        <link>http://llane00.github.io/restart-js/7-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B1%87%E6%80%BB%E7%AF%87/</link>
        <pubDate>Mon, 25 Oct 2021 13:30:08 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 25 Oct 2021 13:30:08 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/7-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%B1%87%E6%80%BB%E7%AF%87/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 本篇是3、4、5、6篇的汇总，会用两个例子来详细说明执行上下文的运行流程 例子</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-6-This</title>
        <link>http://llane00.github.io/restart-js/6-this/</link>
        <pubDate>Sat, 23 Oct 2021 10:45:29 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 23 Oct 2021 10:45:29 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/6-this/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 this一直都是学习js的时候很头疼的东西， 继续接着上篇说，当javascr</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>学习React_hooks_1</title>
        <link>http://llane00.github.io/reactjs/1-react-hooks/</link>
        <pubDate>Sat, 23 Oct 2021 09:36:00 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 23 Oct 2021 09:36:00 +0800</atom:modified>
        <guid>http://llane00.github.io/reactjs/1-react-hooks/</guid>
        <description>React理念：UI = f(data) 纯函数在加载不同数据后产生了不同的UI useState 1 2 3 4 const [n, setN] = useState(0); console.log(n) //读 onClick = () =&amp;gt; (setN(n+1)) //写 onClick2 = () =&amp;gt; (setN(i =&amp;gt; i + 1)) //也支持传入一</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
        
          
            
              <category>React</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-5-作用域链</title>
        <link>http://llane00.github.io/restart-js/5-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
        <pubDate>Sat, 16 Oct 2021 15:04:05 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sat, 16 Oct 2021 15:04:05 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/5-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 上篇说到，当javascript代码执行一段可执行代码(executable</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-4-变量对象</title>
        <link>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Fri, 15 Oct 2021 13:25:39 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 15 Oct 2021 13:25:39 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 上篇说到，当javascript代码执行一段可执行代码(executable</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-3-执行上下文栈</title>
        <link>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</link>
        <pubDate>Thu, 14 Oct 2021 11:33:01 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 14 Oct 2021 11:33:01 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 我们知道在js中有变量提升， 所以js引擎在解析代码的时候不是一行一行去执行的</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-2-作用域</title>
        <link>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
        <pubDate>Tue, 12 Oct 2021 11:19:18 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 12 Oct 2021 11:19:18 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 作用域是程序如何储存和获取变量的约定 javascript采用了词法作用域（即</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>Vim使用笔记</title>
        <link>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 11 Oct 2021 15:09:31 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 11 Oct 2021 15:09:31 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>normal 模式 insert 模式 visual 模式 control + [ 从insert/visual回到normal esc 也是从insert/visual回到normal normal 模式下 hjkl 移动光标左下</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
          
        
        
          
            
              <category>菜鸟学vim</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-1-原型与原型链</title>
        <link>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Mon, 11 Oct 2021 10:56:04 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 11 Oct 2021 10:56:04 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>这个系列是我读冴羽老师博客的感悟， 加入了个人的解读和练习题的解答 1 2 function Person() {} let Neo = new Person() Person 是一个构造函数 Neo是构造函数Person创建的一个实</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>javascript实现节流和防抖</title>
        <link>http://llane00.github.io/posts/js%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</link>
        <pubDate>Mon, 19 Jul 2021 14:30:09 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 14:30:09 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</guid>
        <description>大招技能有冷却 == 节流（throttle） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * 节流原理：在一定时间内，只能触</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>Js原型</title>
        <link>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</link>
        <pubDate>Mon, 19 Jul 2021 09:06:52 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 09:06:52 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</guid>
        <description>关于Js原型 1 2 3 4 5 6 7 8 9 10 11 // 例子 function Person() { } var person = new Person(); console.log(person.__proto__ == Person.prototype) // true console.log(Person.prototype.constructor == Person) // true // 顺便学习一个ES5的方法,可以获得对象的原型 console.log(Object.getPrototypeOf(person) === Person.prototype) // true 实例与</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>重新理解BFC</title>
        <link>http://llane00.github.io/posts/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3bfc/</link>
        <pubDate>Tue, 13 Jul 2021 20:09:51 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 13 Jul 2021 20:09:51 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3bfc/</guid>
        <description>常见的定位方案 普通流(normal flow) 在普通流中，元素按照其在HTML中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到一行被占满</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>css基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>css</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Js大数相加</title>
        <link>http://llane00.github.io/posts/js%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
        <pubDate>Sun, 11 Jul 2021 20:09:12 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sun, 11 Jul 2021 20:09:12 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
        <description>背景： 在 JavaScript 里面，数字均为双精度浮点类型，即一个介于±2−1023和±2+1024之间的数字，或约为±10−308到±10+308，数字精度为</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>使用命令行快速压缩图片</title>
        <link>http://llane00.github.io/posts/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/</link>
        <pubDate>Sun, 06 Dec 2020 13:31:42 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sun, 06 Dec 2020 13:31:42 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E9%80%9F%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/</guid>
        <description>这次推荐的压缩工具是 optimizt 稍微看了下，算是一个压缩图片的工具合集 安装optimizt 1 npm i -g @funboxteam/optimizt 也支持WebStorm, PhpStorm等插件 also support</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>命令行</category>
            
          
        
        
          
            
              <category>日常工具</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
