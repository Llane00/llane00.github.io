<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>学习笔记 on Llane00&#39;s Blog</title>
    <link>http://llane00.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 学习笔记 on Llane00&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>bluetinestyle@126.com (Llane00)</managingEditor>
    <webMaster>bluetinestyle@126.com (Llane00)</webMaster>
    <copyright>©2021, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 15 Oct 2021 13:25:39 +0800</lastBuildDate>
    
        <atom:link href="http://llane00.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>从头学习js-4-变量对象</title>
        <link>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</link>
        <pubDate>Fri, 15 Oct 2021 13:25:39 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Fri, 15 Oct 2021 13:25:39 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/4-%E5%8F%98%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid>
        <description>这个系列是我看冴羽老师的博客的理解笔记 博客原文 当javascript代码执行一段可执行代码(executable code)时，会创建对应的执</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-3-执行上下文栈</title>
        <link>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</link>
        <pubDate>Thu, 14 Oct 2021 11:33:01 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Thu, 14 Oct 2021 11:33:01 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/3-%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88/</guid>
        <description>这个系列是我看冴羽老师的博客的理解笔记 博客原文 我们知道在js中有变量提升， 所以js引擎在解析代码的时候不是一行一行去执行的，而是一段一段去分</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>从头学习js-2-作用域</title>
        <link>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
        <pubDate>Tue, 12 Oct 2021 11:19:18 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 12 Oct 2021 11:19:18 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/2-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
        <description>这个系列是我看冴羽老师的博客的理解笔记 博客原文 作用域是程序如何储存和获取变量的约定 javascript采用了词法作用域（即静态作用域） 静态作</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>Vim使用笔记</title>
        <link>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Mon, 11 Oct 2021 15:09:31 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 11 Oct 2021 15:09:31 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/vim%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        <description>normal 模式 insert 模式 visual 模式 control + [ 从insert/visual回到normal esc 也是从insert/visual回到normal normal 模式下 hjkl 移动光标左下</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>从头学习js-1-原型与原型链</title>
        <link>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</link>
        <pubDate>Mon, 11 Oct 2021 10:56:04 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 11 Oct 2021 10:56:04 +0800</atom:modified>
        <guid>http://llane00.github.io/restart-js/1-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid>
        <description>这个系列是我看冴羽老师的博客的理解笔记 博客原文 function Person() {} let Neo = new Person() Person 是一个构造函数 Neo是构造函数Person创建的一个实例 首先所有的函数都有一</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>从头学习js</category>
            
          
        
      </item>
      
      <item>
        <title>javascript实现节流和防抖</title>
        <link>http://llane00.github.io/posts/js%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</link>
        <pubDate>Mon, 19 Jul 2021 14:30:09 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 14:30:09 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</guid>
        <description>大招技能有冷却 == 节流（throttle） /** * 节流原理：在一定时间内，只能触发一次 * * @param {Function} func 要执行的回调函数 * @param {Number} wait 延时的时间 * @param {Boolean} immediate 是否立即</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      
      <item>
        <title>Js原型</title>
        <link>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</link>
        <pubDate>Mon, 19 Jul 2021 09:06:52 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Mon, 19 Jul 2021 09:06:52 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%8E%9F%E5%9E%8B/</guid>
        <description>关于Js原型 // 例子 function Person() { } var person = new Person(); console.log(person.__proto__ == Person.prototype) // true console.log(Person.prototype.constructor == Person) // true // 顺便学习一个ES5的方法,可以获得对象的原型 console.log(Object.getPrototypeOf(person) === Person.prototype) // true 实例与原型 当读取实例的属性时</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>重新理解BFC</title>
        <link>http://llane00.github.io/posts/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3bfc/</link>
        <pubDate>Tue, 13 Jul 2021 20:09:51 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Tue, 13 Jul 2021 20:09:51 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/%E9%87%8D%E6%96%B0%E7%90%86%E8%A7%A3bfc/</guid>
        <description>常见的定位方案 普通流(normal flow) 在普通流中，元素按照其在HTML中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到一行被占满</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>css基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>css</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Js大数相加</title>
        <link>http://llane00.github.io/posts/js%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
        <pubDate>Sun, 11 Jul 2021 20:09:12 +0800</pubDate>
        <author>bluetinestyle@126.com (Llane00)</author>
        <atom:modified>Sun, 11 Jul 2021 20:09:12 +0800</atom:modified>
        <guid>http://llane00.github.io/posts/js%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
        <description>背景： 在 JavaScript 里面，数字均为双精度浮点类型，即一个介于±2−1023和±2+1024之间的数字，或约为±10−308到±10+308，数字精度为</description>
        
        <dc:creator>Llane00</dc:creator>
        
        
        
        
          
            
              <category>js基础</category>
            
          
            
              <category>学习笔记</category>
            
          
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>用js实现</category>
            
          
        
      </item>
      

    
  </channel>
</rss>
